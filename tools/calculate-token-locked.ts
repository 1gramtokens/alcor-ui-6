require('dotenv').config()
import mongoose from 'mongoose'
import { Market } from './models'
import { networks } from '../config'
import { littleEndianToDesimal, parseAsset } from '../utils'
import { fetchAllRows } from '../utils/eosjs'
import { mongoConnect } from './utils'
import { JsonRpc } from '../assets/libs/eosjs-jsonrpc'
import fetch from 'cross-fetch'

function getFailOverAlcorOnlyRpc(network) {
  const nodes = [network.protocol + '://' + network.host + ':' + network.port]
    .concat(Object.keys(network.client_nodes))
    .filter(n => n.includes('alcor'))

  const rpc = new JsonRpc(nodes.length > 0 ? nodes : [network.protocol + '://' + network.host + ':' + network.port], { fetch })
  return rpc
}

async function getOrders({ chain, market_id, side }) {
  const network = networks[chain]
  const rpc = getFailOverAlcorOnlyRpc(network)

  const rows = await fetchAllRows(rpc, {
    code: network.contract,
    scope: market_id,
    table: `${side}order`
  })

  return rows.map((b) => {
    b.ask = parseAsset(b.ask)
    b.bid = parseAsset(b.bid)
    b.unit_price = littleEndianToDesimal(b.unit_price)

    return b
  })
}

async function calculateMarketLockedToken(market, tokenId, tokenSymbol) {
  const isTokenBase = market.base_token.id === tokenId

  // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
  // Token = BASE ‚Üí buyorder (–≤ BID –±—É–¥–µ—Ç —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω)
  // Token = QUOTE ‚Üí sellorder (–≤ BID –±—É–¥–µ—Ç —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω)
  const side = isTokenBase ? 'buy' : 'sell'

  console.log(`  –¢–æ–∫–µ–Ω –ø–æ–∑–∏—Ü–∏—è: ${isTokenBase ? 'BASE' : 'QUOTE'}`)
  console.log(`  –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É: ${side}order`)

  const orders = await getOrders({ chain: market.chain, market_id: market.id, side })

  console.log(`  –ù–∞–π–¥–µ–Ω–æ ${orders.length} ${side} –æ—Ä–¥–µ—Ä–æ–≤`)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ä–¥–µ—Ä —á—Ç–æ –≤ BID –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—à —Ç–æ–∫–µ–Ω
  if (orders.length > 0) {
    const firstOrder = orders[0]
    if (firstOrder.bid.symbol.symbol !== tokenSymbol) {
      console.log(`  ‚ö†Ô∏è  –û–®–ò–ë–ö–ê: –í BID –Ω–µ ${tokenSymbol}, –∞ ${firstOrder.bid.symbol.symbol}!`)
      return { amount: 0, precision: 0 }
    }

    // –ü–æ–ª—É—á–∞–µ–º precision –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    const precision = firstOrder.bid.symbol.precision

    // –°—É–º–º–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ BID
    let totalAmount = 0
    orders.forEach(order => {
      totalAmount += order.bid.amount
    })

    const divisor = Math.pow(10, precision)
    const formatted = (totalAmount / divisor).toLocaleString('en-US', { maximumFractionDigits: precision })
    console.log(`  üí∞ –ó–∞–ª–æ—á–µ–Ω–æ ${tokenSymbol} (ID: ${market.id}): ${formatted} ${tokenSymbol} (raw: ${totalAmount})`)

    return { amount: totalAmount, precision }
  }

  return { amount: 0, precision: 0 }
}

async function main() {
  const args = process.argv.slice(2)

  if (args.length < 2) {
    console.error('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx server/calculate-token-locked.ts <chain> <token_id>')
    console.error('   –ü—Ä–∏–º–µ—Ä: npx tsx server/calculate-token-locked.ts proton xpr-eosio.token')
    process.exit(1)
  }

  const [chain, tokenId] = args

  try {
    await mongoConnect()
    console.log('‚úÖ Connected to MongoDB')

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ç—ã —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º
    const markets = await Market.find({
      chain,
      $or: [
        { 'base_token.id': tokenId },
        { 'quote_token.id': tokenId }
      ]
    })

    if (markets.length === 0) {
      console.log(`\n‚ùå –ú–∞—Ä–∫–µ—Ç—ã —Å —Ç–æ–∫–µ–Ω–æ–º ${tokenId} –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ ${chain} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`)
      await mongoose.disconnect()
      return
    }

    console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ ${markets.length} –º–∞—Ä–∫–µ—Ç–æ–≤ —Å —Ç–æ–∫–µ–Ω–æ–º ${tokenId}\n`)

    // –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∞
    const firstMarket = markets[0]
    const isTokenBase = firstMarket.base_token.id === tokenId
    const tokenSymbol = isTokenBase
      ? firstMarket.base_token.symbol.name
      : firstMarket.quote_token.symbol.name
    const tokenPrecision = isTokenBase
      ? firstMarket.base_token.symbol.precision
      : firstMarket.quote_token.symbol.precision

    console.log(`–¢–æ–∫–µ–Ω: ${tokenSymbol}`)
    console.log(`Token ID: ${tokenId}`)
    console.log(`Precision: ${tokenPrecision}\n`)

    let grandTotal = 0
    let processedCount = 0

    for (const market of markets) {
      console.log(`\n${'='.repeat(80)}`)
      console.log(`–ú–∞—Ä–∫–µ—Ç ID: ${market.id}`)
      console.log(`Ticker: ${market.ticker_id}`)
      console.log(`Base: ${market.base_token.symbol.name} (${market.base_token.id})`)
      console.log(`Quote: ${market.quote_token.symbol.name} (${market.quote_token.id})`)
      console.log('='.repeat(80))

      const result = await calculateMarketLockedToken(market, tokenId, tokenSymbol)
      grandTotal += result.amount
      processedCount++

      const divisor = Math.pow(10, tokenPrecision)
      console.log(`\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—Ä–∫–µ—Ç–æ–≤: ${processedCount}/${markets.length}`)
      console.log(`üí∞ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ ${tokenSymbol}: ${(grandTotal / divisor).toLocaleString('en-US', { maximumFractionDigits: tokenPrecision })} ${tokenSymbol}`)
    }

    const divisor = Math.pow(10, tokenPrecision)
    console.log(`\n\n${'='.repeat(80)}`)
    console.log(`üìä –ò–¢–û–ì–û –ó–ê–õ–û–ß–ï–ù–û ${tokenSymbol} (${processedCount} –º–∞—Ä–∫–µ—Ç–æ–≤):`)
    console.log(`üí∞ ${(grandTotal / divisor).toLocaleString('en-US', { maximumFractionDigits: tokenPrecision })} ${tokenSymbol}`)
    console.log(`üìù Raw: ${grandTotal}`)
    console.log('='.repeat(80))

    await mongoose.disconnect()
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    await mongoose.disconnect()
    process.exit(1)
  }
}

main()
